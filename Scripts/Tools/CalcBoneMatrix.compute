// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcBoneMatrix
//==================
// 
//==================
RWStructuredBuffer<float4x4> _Bones;
StructuredBuffer<float4x4> _LocalToWorldBuffer;
StructuredBuffer<float4x4> _BindposesBuffer;
float4x4 _RootWorldToLocal;

[numthreads(8,8,1)]
void CalcBoneMatrix (uint3 id : SV_DispatchThreadID,uint groupIndex:SV_GROUPINDEX)
{
    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    _Bones[groupIndex] = mul(_RootWorldToLocal,mul(_LocalToWorldBuffer[groupIndex],_BindposesBuffer[groupIndex]));
}


//==================
// 
//==================
#pragma kernel CalcSkinnedMesh
struct BoneInfoPerVertex{
    uint bonesCount;
    uint bonesStartIndex;
};
struct BoneWeight1{
    float weight;
    uint boneIndex;
};

StructuredBuffer<BoneInfoPerVertex> _BoneInfoPerVertexBuffer;
StructuredBuffer<BoneWeight1> _BoneWeightBuffer;
float4 GetSkinnedPos(uint vid,float4 pos){
    float4 bonePos = (float4)0;

    BoneInfoPerVertex boneInfo = _BoneInfoPerVertexBuffer[vid];
    float bonesCount = boneInfo.bonesCount;
    float boneStart = boneInfo.bonesStartIndex;

    float4x4 boneMat = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};

    [unroll(4)]
    for(int i=0;i<bonesCount;i++){
        BoneWeight1 bw = _BoneWeightBuffer[boneStart + i];
        float weight = bw.weight;
        uint boneIndex = bw.boneIndex;

        boneMat = _Bones[boneIndex];
        bonePos += mul(boneMat,pos) * weight;
    }

    return bonePos;
}

RWStructuredBuffer<float3> _MeshBuffer;
[numthreads(64,1,1)]
void CalcSkinnedMesh(uint3 id : SV_DispatchThreadID,uint groupIndex:SV_GROUPINDEX)
{
    _MeshBuffer[groupIndex] = GetSkinnedPos(groupIndex,float4(_MeshBuffer[groupIndex],0)).xyz;
}