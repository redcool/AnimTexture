// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcBoneMatrix
#pragma kernel CalcSkinnedMesh

#include "CSLib.hlsl"

//==================
// 
//==================
RWStructuredBuffer<float4x4> _Bones;
StructuredBuffer<float4x4> _LocalToWorldBuffer;
StructuredBuffer<float4x4> _BindposesBuffer;
float4x4 _RootWorldToLocal;



[numthreads(8,8,1)]
void CalcBoneMatrix (uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GROUPID,uint groupThreadIndex:SV_GROUPINDEX)
{
    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    uint dispatchThreadIndex = GetDispatchThreadIndex(groupId,groupThreadIndex,uint3(8,8,1));
    _Bones[dispatchThreadIndex] = mul(_RootWorldToLocal,mul(_LocalToWorldBuffer[dispatchThreadIndex],_BindposesBuffer[dispatchThreadIndex]));
}


//==================
// 
//==================
struct BoneInfoPerVertex{
    uint bonesCount;
    uint bonesStartIndex;
};
struct BoneWeight1{
    float weight;
    uint boneIndex;
};

StructuredBuffer<BoneInfoPerVertex> _BoneInfoPerVertexBuffer;
StructuredBuffer<BoneWeight1> _BoneWeightBuffer;
float4 GetSkinnedPos(uint vid,float4 pos){
    float4 bonePos = (float4)0;

    BoneInfoPerVertex boneInfo = _BoneInfoPerVertexBuffer[vid];
    float bonesCount = boneInfo.bonesCount;
    float boneStart = boneInfo.bonesStartIndex;

    [unroll(4)]
    for(int i=0;i<bonesCount;i++){
        BoneWeight1 bw = _BoneWeightBuffer[boneStart + i];
        float weight = bw.weight;
        uint boneIndex = bw.boneIndex;

        float4x4 boneMat = _Bones[boneIndex];
        bonePos += mul(boneMat,pos) * weight;
    }

    return bonePos;
}

RWStructuredBuffer<float3> _MeshBuffer;
[numthreads(8,8,1)]
void CalcSkinnedMesh(uint3 id : SV_DispatchThreadID,uint3 groupId : SV_GROUPID,uint groupThreadIndex:SV_GROUPINDEX)
{
    uint dispatchThreadIndex = GetDispatchThreadIndex(groupId,groupThreadIndex,uint3(8,8,1));
    _MeshBuffer[dispatchThreadIndex] = GetSkinnedPos(dispatchThreadIndex,float4(_MeshBuffer[dispatchThreadIndex],1)).xyz;
}